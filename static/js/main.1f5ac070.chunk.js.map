{"version":3,"sources":["pages/main/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","totalizadores","loadTotalizadores","a","title","label","number","cardColor","setState","this","className","map","totalizador","index","key","Component","Routes","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAIqBA,G,kNACjBC,MAAQ,CACJC,cAAe,I,EAOnBC,kB,sBAAoB,4BAAAC,EAAA,sDACVF,EAAgB,CAClB,CAAEG,MAAO,cAAeC,MAAO,cAAeC,OAAQ,GAAIC,UAAW,SACrE,CAAEH,MAAO,UAAWC,MAAO,UAAWC,OAAQ,GAAIC,UAAW,SACjE,EAAKC,SAAS,CAAEP,kBAJA,2C,kEAHhBQ,KAAKP,sB,+BAUC,IACED,EAAkBQ,KAAKT,MAAvBC,cACR,OACI,yBAAKS,UAAU,aACX,wBAAIA,UAAU,mBAAd,QACA,yBAAKA,UAAU,iBACVT,EAAcU,KAAI,SAACC,EAAaC,GAAd,OACf,6BAASH,UAAS,0BAAqBE,EAAYL,WAAaO,IAAG,sBAAiBD,IAChF,wBAAIH,UAAU,SAASE,EAAYR,OACnC,yBAAKM,UAAU,gBACf,yBAAKA,UAAU,UACVE,EAAYN,kB,GA3BXS,cCSnBC,EARA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWnB,OCGxBoB,G,MANH,kBACV,yBAAKT,UAAU,OACb,kBAAC,EAAD,SCKgBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f5ac070.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default class Main extends Component {\r\n    state = {\r\n        totalizadores: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTotalizadores();\r\n    }\r\n\r\n    loadTotalizadores = async () => {\r\n        const totalizadores = [\r\n            { title: 'Confirmados', label: 'confirmados', number: 20, cardColor: 'green' },\r\n            { title: 'Curados', label: 'curados', number: 40, cardColor: 'blue' }]\r\n        this.setState({ totalizadores });\r\n    };\r\n\r\n    render() {\r\n        const { totalizadores } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"container-title\">Hoje</h1>\r\n                <div className=\"totalizadores\">\r\n                    {totalizadores.map((totalizador, index) => (\r\n                        <article className={`card card-color-${totalizador.cardColor}`} key={`totalizador-${index}`}>\r\n                            <h3 className=\"title\">{totalizador.title}</h3>\r\n                            <div className=\"color-label\"></div>\r\n                            <div className=\"number\">\r\n                                {totalizador.number}\r\n                            </div>\r\n                        </article>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Main from './pages/main';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" component={Main} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\r\nimport Routes from './routes';\r\n\r\nimport './styles.css';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Routes />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}